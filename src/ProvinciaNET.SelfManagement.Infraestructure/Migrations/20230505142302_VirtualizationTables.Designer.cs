// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProvinciaNET.SelfManagement.Infraestructure.Data;

#nullable disable

namespace ProvinciaNET.SelfManagement.Infraestructure.Migrations
{
    [DbContext(typeof(SelfManagementContext))]
    [Migration("20230505142302_VirtualizationTables")]
    partial class VirtualizationTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GivenName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("SamAccountName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SurName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserPrincipalName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MembershipId");

                    b.ToTable("AdUserAccounts", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccountProvision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("AdUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("HasError")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AdUserAccountId");

                    b.ToTable("AdUserAccountProvisions", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgCostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrgCostCenters", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrgDirections", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("AdGroupAccountName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdGroupDisplayName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostalCode")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrgLocations", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgMailDatabaseGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OrgMailDatabaseGroups", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("AdGroupAccountName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdGroupDisplayName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<bool>("Show")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("StructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("OrgMemberships", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DirectionId");

                    b.ToTable("OrgSections", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Group")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MailDatabaseGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgUnit")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MailDatabaseGroupId");

                    b.HasIndex("SectionId");

                    b.ToTable("OrgStructures", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirCategoryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VirtualMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VirtualMachineId");

                    b.ToTable("VirCategoryTags", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirCluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<int>("DataCenterId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DataCenterId");

                    b.ToTable("VirClusters", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirDataCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VirDataCenters", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirDataStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("VirDataStores", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Mask")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VirNetworks", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirOperatingSystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VirOperatingSystemTypes", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VirResources", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DnsAddress1")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("DnsAddress2")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("IPv4Address")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Memory")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<int>("OperatingSystemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("UseDhcp")
                        .HasColumnType("bit");

                    b.Property<bool>("UseImage")
                        .HasColumnType("bit");

                    b.Property<bool>("UseTemplate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DataStoreId");

                    b.HasIndex("NetworkId");

                    b.HasIndex("OperatingSystemTypeId");

                    b.ToTable("VirtualMachines", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachineDisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiskSizeGB")
                        .HasColumnType("int");

                    b.Property<string>("DiskType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("VirtualMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VirtualMachineId");

                    b.ToTable("VirtualMachineDisks", "dbo");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccount", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgLocation", "Location")
                        .WithMany("AdUserAccounts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgMembership", "Membership")
                        .WithMany("AdUserAccounts")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccountProvision", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccount", "AdUserAccount")
                        .WithMany("AdUserAccountProvisions")
                        .HasForeignKey("AdUserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdUserAccount");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgMembership", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgStructure", "Structure")
                        .WithMany("Memberships")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgSection", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgCostCenter", "CostCenter")
                        .WithMany("Sections")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgDirection", "Direction")
                        .WithMany("Sections")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgStructure", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgMailDatabaseGroup", "MailDatabaseGroup")
                        .WithMany("Structures")
                        .HasForeignKey("MailDatabaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.OrgSection", "Section")
                        .WithMany("Structures")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailDatabaseGroup");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirCategoryTag", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachine", "VirtualMachine")
                        .WithMany("CategoryTags")
                        .HasForeignKey("VirtualMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualMachine");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirCluster", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirDataCenter", "DataCenter")
                        .WithMany("Clusters")
                        .HasForeignKey("DataCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataCenter");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirDataStore", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirCluster", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachine", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirDataStore", "DataStore")
                        .WithMany()
                        .HasForeignKey("DataStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirNetwork", "Network")
                        .WithMany()
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirOperatingSystemType", "OperatingSystemType")
                        .WithMany()
                        .HasForeignKey("OperatingSystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataStore");

                    b.Navigation("Network");

                    b.Navigation("OperatingSystemType");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachineDisk", b =>
                {
                    b.HasOne("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachine", "VirtualMachine")
                        .WithMany("Disks")
                        .HasForeignKey("VirtualMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualMachine");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.AdUserAccount", b =>
                {
                    b.Navigation("AdUserAccountProvisions");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgCostCenter", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgDirection", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgLocation", b =>
                {
                    b.Navigation("AdUserAccounts");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgMailDatabaseGroup", b =>
                {
                    b.Navigation("Structures");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgMembership", b =>
                {
                    b.Navigation("AdUserAccounts");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgSection", b =>
                {
                    b.Navigation("Structures");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.OrgStructure", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirDataCenter", b =>
                {
                    b.Navigation("Clusters");
                });

            modelBuilder.Entity("ProvinciaNET.SelfManagement.Core.Entities.VirtualMachine", b =>
                {
                    b.Navigation("CategoryTags");

                    b.Navigation("Disks");
                });
#pragma warning restore 612, 618
        }
    }
}
