@page "/orgmembership/update"

@attribute [Authorize]
@inject IHttpContextAccessor HttpContextAccessor
@inject DialogService DialogService
@inject IOrgMembershipService OrgMembershipService
@inject IOrgSectionService OrgSectionService
@inject IOrgStructureService OrgStructureService
@inject IStringLocalizer<LocalizationResource> L

<PageTitle>@L["Edit"] @L["Membership"]</PageTitle>
<RadzenRow>
    <RadzenColumn SizeMD="8">
        <RadzenLabel style="font-weight: bold" Text="@L["Item not available"]" Visible="@(!canEdit)" />
    </RadzenColumn>
    <RadzenColumn SizeMD="4">
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" style="margin-bottom: 20px" Text="@L["Close"]" Visible="@(!canEdit)" Click="@CancelButtonClick" />
    </RadzenColumn>
</RadzenRow>
<RadzenRow>
    <RadzenColumn SizeMD="8">
        <RadzenLabel style="font-weight: bold" Text="@L["Concurrency Conflict"]" Visible="@hasChanges" />
    </RadzenColumn>
    <RadzenColumn SizeMD="4">
        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="autorenew" style="margin-bottom: 20px" Text="@L["Reload"]" Visible="@hasChanges" Click="@ReloadButtonClick" />
    </RadzenColumn>
</RadzenRow>
<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">@L["Cannot save"] @L["Membership"]</RadzenAlert>
    <RadzenTemplateForm TItem="OrgMembership" Data="@resource" Visible="@(resource != null && canEdit)" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Section"]" Component="Section" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenDropDownDataGrid Data="@orgSections" TextProperty="Name" ValueProperty="Id"
                                        Placeholder="@($"{L["ChooseA"]} {L["Section"]}")" style="display: block; width: 100%"
                                        @bind-Value="@sectionId" Name="Section" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Structure"]" Component="Structure" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenDropDownDataGrid Data="@(orgStructures!.Where(o => o.Section.Id == sectionId))" TextProperty="Group" ValueProperty="Id"
                                        Placeholder="@($"{L["ChooseA"]} {L["Structure"]}")" style="display: block; width: 100%"
                                        @bind-Value="@resource!.StructureId" Name="Structure" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["AdGroupDisplayName"]" Component="AdGroupDisplayName" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenTextBox Name="AdGroupDisplayName" @bind-Value="@resource!.AdGroupDisplayName" style="display: block; width: 100%" />
                <RadzenRequiredValidator Component="AdGroupDisplayName" Text="@L["AdGroupDisplayName is required"]" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["AdGroupAccountName"]" Component="AdGroupAccountName" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenTextBox Name="AdGroupAccountName" @bind-Value="@resource!.AdGroupAccountName" style="display: block; width: 100%" />
                <RadzenRequiredValidator Component="AdGroupAccountName" Text="@L["AdGroupAccountName is required"]" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Show"]" Component="Show" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenCheckBox Name="Show" @bind-Value="@resource!.Show" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Active"]" Component="Active" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenCheckBox Name="Active" @bind-Value="@resource!.Active" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="@L["Save"]" Variant="Variant.Flat" ButtonType="ButtonType.Submit" Icon="save" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="@L["Cancel"]" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    [Parameter]
    public int Id { get; set; }

    bool hasChanges = false;
    bool canEdit = true;
    bool errorVisible = false;
    OrgMembership? resource;
    IEnumerable<OrgStructure>? orgStructures;
    IEnumerable<OrgSection>? orgSections;
    int sectionId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orgSections = await OrgSectionService.GetAsync();
        orgStructures = await OrgStructureService.GetAsync();
        resource = await OrgMembershipService.GetAsync(Id);

        sectionId = resource!.Structure!.SectionId;
    }

    async Task FormSubmit()
    {
        if (resource == null) return;

        try
        {
            resource.ModifiedBy = $"{HttpContextAccessor.HttpContext?.User.Identity?.Name?.Split("\\").Last()}";
            await OrgMembershipService.UpdateAsync(Id, resource);
            DialogService.Close(resource);
        }
        catch (Exception)
        {
            hasChanges = false;
            canEdit = true;
            errorVisible = true;
        }
    }

    void CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }

    async Task ReloadButtonClick(MouseEventArgs args)
    {
        hasChanges = false;
        canEdit = true;
        resource = await OrgMembershipService.GetAsync(Id);
    }
}