@page "/orgdirections"

@attribute [Authorize]
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject OrgDirectionService OrgDirectionService
@inject IStringLocalizer<LocalizationResource> L

<PageTitle>@L["Directions"]</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="@L["Directions"]" TextStyle="TextStyle.H4" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenSplitButton Icon="get_app" Text="@L["Export"]" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                    <RadzenSplitButtonItem Text="CSV" Value="csv" />
                </RadzenSplitButton>
                <RadzenButton Icon="add_circle_outline" Text="@L["Add"]" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="@L["Search"]" style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" Data="@resources" LoadData="@LoadData" TItem="OrgDirection" Density="Density.Compact"
                            IsLoading="@isLoading" Count="@count" AllowFiltering="true" FilterMode="FilterMode.Advanced" RowDoubleClick="@EditRow"
                            AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSize=@pagesize PageSizeOptions=@(new int[]{5, 10, 20, 30})>
                <Columns>
                    <RadzenDataGridColumn TItem="OrgDirection" Property="Id" Title="Id" Width="70px" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="Name" Title="@L["Name"]" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="Active" Title="@L["Active"]" Width="100px" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="CreatedBy" Title="@L["Created By"]" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="CreatedOn" Title="@L["Created On"]" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="ModifiedBy" Title="@L["Modified By"]" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgDirection" Property="ModifiedOn" Title="@L["Modified On"]" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgDirection" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="resource">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                          Icon="delete"
                                          Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter"
                                          Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, resource))
                                          @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    bool isLoading = false;
    int count = 0;
    int pagesize = 10;
    RadzenDataGrid<OrgDirection>? grid0;
    IEnumerable<OrgDirection>? resources;
    OrgDirection? resource;

    async Task LoadData(string? filter = null, int? top = null, int? skip = null, string? orderby = null)
    {
        var result = await OrgDirectionService.GetOdataAsync(filter: filter, top: top, skip: skip, orderby: orderby, count: true);
        resources = result.Value.AsODataEnumerable();
        count = result.Count;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        resource = new OrgDirection();
        await LoadData(top: pagesize, skip: 0);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        await LoadData(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy);
        isLoading = false;
    }

    async Task Search(ChangeEventArgs args)
    {
        if (args.Value == null) return;
        var search = args.Value.ToString()!.ToLowerInvariant();

        if (grid0 != null) await grid0.GoToPage(0);
        isLoading = true;
        await LoadData(filter: $"contains(tolower(Name),'{search}')", top: grid0!.PageSize, skip: 0);
        isLoading = false;
    }

    async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<OrgDirectionCreate>($"{L["Add"]} {L["Direction"]}", null);
        if (grid0 != null) await grid0.Reload();
    }

    async Task EditRow(DataGridRowMouseEventArgs<OrgDirection> args)
    {
        await DialogService.OpenAsync<OrgDirectionUpdate>($"{L["Edit"]} {L["Direction"]}", new Dictionary<string, object> { { "Id", args.Data.Id } });
        if (grid0 != null) await grid0.Reload();
    }

    async Task GridDeleteButtonClick(MouseEventArgs args, OrgDirection resource)
    {
        try
        {
            if (await DialogService.Confirm(L["Delete Confirmation"]) == true)
            {
                await OrgDirectionService.DeleteAsync(resource.Id);
                if (grid0 != null) await grid0.Reload();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"{L["Unable to delete"]} {@L["Direction"]}. {ex.Message}"
                });
        }
    }

    void ExportClick(RadzenSplitButtonItem args)
    {
        OrgDirectionService.ExportToFile(args.Value, "OrgDirections");
    }
}