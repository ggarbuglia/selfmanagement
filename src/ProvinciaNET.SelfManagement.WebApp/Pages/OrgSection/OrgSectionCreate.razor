@page "/orgsection/create"

@attribute [Authorize]
@inject IHttpContextAccessor HttpContextAccessor
@inject DialogService DialogService
@inject OrgSectionService OrgSectionService
@inject OrgDirectionService OrgDirectionService
@inject OrgCostCenterService OrgCostCenterService
@inject IStringLocalizer<LocalizationResource> L

<PageTitle>@L["Add"] @L["Section"]</PageTitle>
<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">@L["Cannot save"] @L["Section"]</RadzenAlert>
    <RadzenTemplateForm TItem="OrgSection" Data="@resource" Visible="@(resource != null && canEdit)" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["CostCenter"]" Component="OrgCostCenter" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenDropDownDataGrid Data="@orgCostCenters" TextProperty="Name" ValueProperty="Id"
                                        Placeholder="@($"{L["Choose"]} {L["CostCenter"]}")" style="display: block; width: 100%"
                                        @bind-Value="@resource!.CostCenterId" Name="CostCenter" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Direction"]" Component="OrgDirection" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenDropDownDataGrid Data="@orgDirections" TextProperty="Name" ValueProperty="Id"
                                        Placeholder="@($"{L["ChooseA"]} {L["Direction"]}")" style="display: block; width: 100%"
                                        @bind-Value="@resource!.DirectionId" Name="Direction" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Name"]" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenTextBox Name="Name" @bind-Value="@resource!.Name" style="display: block; width: 100%" />
                <RadzenRequiredValidator Component="Name" Text="@L["Name is required"]" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="4">
                <RadzenLabel Text="@L["Active"]" Component="Active" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="8">
                <RadzenCheckBox Name="Active" @bind-Value="@resource!.Active" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="@L["Save"]" Variant="Variant.Flat" ButtonType="ButtonType.Submit" Icon="save" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="@L["Cancel"]" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    bool canEdit = true;
    bool errorVisible = false;
    OrgSection? resource;
    IEnumerable<OrgCostCenter>? orgCostCenters;
    IEnumerable<OrgDirection>? orgDirections;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        orgCostCenters = await OrgCostCenterService.GetAsync();
        orgDirections = await OrgDirectionService.GetAsync();
        resource = new OrgSection();
    }

    async Task FormSubmit()
    {
        if (resource == null) return;

        try
        {
            resource.CreatedBy = $"{HttpContextAccessor.HttpContext?.User.Identity?.Name?.Split("\\").Last()}";
            await OrgSectionService.CreateAsync(resource);
            DialogService.Close(resource);
        }
        catch (Exception)
        {
            canEdit = true;
            errorVisible = true;
        }
    }

    void CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}