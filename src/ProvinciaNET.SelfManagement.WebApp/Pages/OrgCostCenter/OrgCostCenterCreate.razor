@page "/orgcostcenter/create"

@attribute [Authorize]
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject OrgCostCenterService OrgCostCenterService
@inject Microsoft.Extensions.Localization.IStringLocalizer<OrgCostCenterCreate> L

<PageTitle>Add OrgCostCenter</PageTitle>
<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save OrgCostCenter</RadzenAlert>
    <RadzenTemplateForm TItem="OrgCostCenter" Data="@orgCostCenter" Visible="@(orgCostCenter != null && canEdit)" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@orgCostCenter.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    bool hasChanges   = false;
    bool canEdit      = true;
    bool errorVisible = false;
    OrgCostCenter orgCostCenter = new OrgCostCenter();

    async Task FormSubmit()
    {
        try
        {
            orgCostCenter.CreatedBy = $"{HttpContextAccessor.HttpContext?.User.Identity?.Name?.Split("\\")[1]}";
            await OrgCostCenterService.CreateOrgCostCenter(orgCostCenter);
            DialogService.Close(orgCostCenter);
        }
        catch (Exception)
        {
            //hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            //canEdit    = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    void CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}