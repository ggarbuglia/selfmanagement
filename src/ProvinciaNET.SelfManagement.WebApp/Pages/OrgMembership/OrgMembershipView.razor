@page "/orgmemberships"

@attribute [Authorize]
@inherits MasterTableViewBase<OrgMembershipService, OrgMembership, OrgMembershipCreate, OrgMembershipUpdate>

<PageTitle>@L["Memberships"]</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="@L["Memberships"]" TextStyle="TextStyle.H4" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenSplitButton Icon="get_app" Text="@L["Export"]" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                    <RadzenSplitButtonItem Text="CSV" Value="csv" />
                </RadzenSplitButton>
                <RadzenButton Icon="add_circle_outline" Text="@L["Add"]" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="@L["Search"]" style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" Data="@resources" LoadData="@LoadData" TItem="OrgMembership" Density="Density.Compact"
                            IsLoading="@isLoading" Count="@count" RowDoubleClick="@EditRow"
                            AllowFiltering="true" FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSize=@pagesize PageSizeOptions=@(new int[]{5, 10, 20, 30})>
                <Columns>
                    <RadzenDataGridColumn TItem="OrgMembership" Property="Id" Title="Id" Width="70px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="Structure.Group" Title="@L["Structure"]" Width="250px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="AdGroupDisplayName" Title="@L["AdGroupDisplayName"]" Width="250px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="AdGroupAccountName" Title="@L["AdGroupAccountName"]" Width="250px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="Show" Title="@L["Show"]" Width="100px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="Active" Title="@L["Active"]" Width="100px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="CreatedBy" Title="@L["Created By"]" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="CreatedOn" Title="@L["Created On"]" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="ModifiedBy" Title="@L["Modified By"]" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgMembership" Property="ModifiedOn" Title="@L["Modified On"]" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgMembership" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="resource">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                          Icon="delete"
                                          Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter"
                                          Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, resource))
                                          @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    protected override async Task GetData(string? filter = null, int? top = null, int? skip = null, string? orderby = null)
    {
        try
        {
            var result = await MainService!.GetOdataAsync(filter: filter, top: top, skip: skip, orderby: orderby, expand: "Structure", count: true);
            resources = result.Value.AsODataEnumerable();
            count = result.Count;
        }
        catch (Exception ex)
        {
            resources = new List<OrgMembership>();
            count = 0;
            NotificationService.Notify(new NotificationMessage
                {
                    Duration = 8000,
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"{L["Unable to retrieve"]} {@L["OrgMembership"]}. {ex.Message}"
                }
            );
        }
    }
}