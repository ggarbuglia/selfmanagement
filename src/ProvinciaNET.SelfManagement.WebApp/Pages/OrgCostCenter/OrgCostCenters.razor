@page "/orgcostcenters"

@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject OrgCostCenterService OrgCostCenterService

@inject Microsoft.Extensions.Localization.IStringLocalizer<OrgCostCenters> L

<PageTitle>OrgCostCenters</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="OrgCostCenters" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                    <RadzenSplitButtonItem Text="CSV" Value="csv" />
                </RadzenSplitButton>
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" Data="@orgCostCenters" LoadData="@LoadData" TItem="OrgCostCenter" 
                IsLoading="@isLoading" Count="@count" AllowFiltering="true" FilterMode="FilterMode.Advanced" RowDoubleClick="@EditRow"
                AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSize=@pagesize PageSizeOptions=@(new int[]{5, 10, 20, 30})>
                <Columns>
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="Id" Title="Id" Width="70px" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="Name" Title="Name" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="Active" Title="Active" Width="90px" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="CreatedBy" Title="Created By" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="CreatedOn" Title="Created On" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="ModifiedBy" Title="Modified By" Width="200px" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Property="ModifiedOn" Title="Modified On" Width="130px" FormatString="{0:dd/MM/yyy}" />
                    <RadzenDataGridColumn TItem="OrgCostCenter" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="orgCostCenter">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium" Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, orgCostCenter)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    bool isLoading = false;
    int count      = 0;
    int pagesize   = 10;
    RadzenDataGrid<OrgCostCenter>? grid0;
    IEnumerable<OrgCostCenter> orgCostCenters = new List<OrgCostCenter>();
    OrgCostCenter orgCostCenter = new OrgCostCenter();

    protected override async Task OnInitializedAsync()
    {
        var result     = await OrgCostCenterService.GetOrgCostCenters(top: pagesize, skip: 0, count: true);
        orgCostCenters = result.Value.AsODataEnumerable();
        count          = result.Count;

        await base.OnInitializedAsync();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var result     = await OrgCostCenterService.GetOrgCostCenters(filter: args.Filter, top: args.Top, skip: args.Skip, orderby: args.OrderBy, count: true);
        orgCostCenters = result.Value.AsODataEnumerable();
        count          = result.Count;

        isLoading = false;
    }

    async Task Search(ChangeEventArgs args)
    {
        await grid0.GoToPage(0);
        var result     = await OrgCostCenterService.GetOrgCostCenters(filter: $"contains(Name,'{args.Value}')", count: true);
        orgCostCenters = result.Value.AsODataEnumerable();
        count          = result.Count;
    }

    async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<OrgCostCenterCreate>("Add OrgCostCenter", null);
        await grid0.Reload();
    }

    async Task EditRow(DataGridRowMouseEventArgs<OrgCostCenter> args)
    {
        await DialogService.OpenAsync<OrgCostCenterUpdate>("Edit OrgCostCenter", new Dictionary<string, object> { { "Id", args.Data.Id } });
        await grid0.Reload();
    }

    async Task GridDeleteButtonClick(MouseEventArgs args, OrgCostCenter orgCostCenter)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await OrgCostCenterService.DeleteOrgCostCenter(orgCostCenter.Id);
                if (deleteResult != null) await grid0.Reload();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete OrgCostCenter"
                });
        }
    }

    void ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            OrgCostCenterService.ExportOrgCostCentersToCSV(new Query
                {
                    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
                    OrderBy = $"{grid0.Query.OrderBy}",
                    Expand = "",
                    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
                }, "OrgCostCenters");
        }

        if (args == null || args.Value == "xlsx")
        {
            OrgCostCenterService.ExportOrgCostCentersToExcel(new Query
                {
                    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter) ? "true" : grid0.Query.Filter)}",
                    OrderBy = $"{grid0.Query.OrderBy}",
                    Expand = "",
                    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
                }, "OrgCostCenters");
        }
    }
}